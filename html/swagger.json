{
  "swagger": "2.0",
  "info": {
    "version": "1.2",
    "description": "You can use API without specific lang or write lang in path (Example: http://80.211.26.238:8080/ru-RU/api/method) or add parameter in query or body. Default lang - en-US",
    "title": "Test Project",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "dantes2104@gmail.com"
    }
  },
  "host": "80.211.26.238:8080",
  "basePath": "/api",
  "tags": [
    {
      "name": "server",
      "description": "Everything about server`s public data"
    },
    {
      "name": "account",
      "description": "Access to user`s account"
    },
    {
      "name": "blacklist",
      "description": "Operations with user`s blacklist"
    },
    {
      "name": "friends",
      "description": "Operations with user`s friends lists"
    },
    {
      "name": "photos",
      "description": "Operations with user`s photo"
    },
    {
      "name": "messages",
      "description": "Operations with user`s messages"
    }
  ],
  "schemes": [
    "http"
  ],
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string",
          "example": "error"
        }
      },
      "xml": {
        "name": "Error"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "description": "Response from server"
        },
        "error": {
          "$ref": "#/definitions/Error"
        }
      },
      "xml": {
        "name": "Response"
      }
    },
    "User": {
      "allOf": [
        {
          "$ref": "#/definitions/ApiResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "description": "Object of User",
              "type": "object",
              "required": [
                "id",
                "firstName",
                "lastName",
                "secondName",
                "closed"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "default": -1,
                  "description": "If id = -1 return youself"
                },
                "login": {
                  "type": "string",
                  "description": "User`s login"
                },
                "firstName": {
                  "type": "string",
                  "description": "User`s first name"
                },
                "lastName": {
                  "type": "string",
                  "description": "User`s middle name"
                },
                "secondName": {
                  "type": "string",
                  "description": "User`s second name"
                },
                "sex": {
                  "type": "string",
                  "description": "User`s sex",
                  "enum": [
                    "man",
                    "woman"
                  ]
                },
                "bdate": {
                  "type": "string",
                  "description": "User`s bdate. Format: dd.mm.yyyy"
                },
                "mobile_phone": {
                  "type": "string",
                  "description": "User`s mobile phone. Format: +1234567891011"
                },
                "home_phone": {
                  "type": "string",
                  "description": "User`s home phone"
                },
                "site": {
                  "type": "string",
                  "description": "User`s site"
                },
                "status": {
                  "type": "string",
                  "description": "User`s status. WARNING: UTF-8 (utf8mb4)"
                },
                "verified": {
                  "type": "boolean",
                  "description": "It granded that user is verified"
                },
                "closed": {
                  "type": "boolean",
                  "description": "This account is closed"
                },
                "balance": {
                  "type": "integer",
                  "description": "User`s balance. Only for id = -1"
                },
                "canAddToBlack": {
                  "type": "boolean",
                  "description": "If true you can add this user to blacklist"
                },
                "canAddToFriend": {
                  "type": "boolean",
                  "description": "If true you can add this user to friend"
                }
              }
            }
          }
        }
      ]
    },
    "Peer": {
      "type": "object",
      "description": "Object of peer",
      "properties": {
        "id": {
          "type": "number",
          "minimum": 0,
          "description": "Peer`s id"
        },
        "name": {
          "type": "string",
          "description": "Peer`s name"
        },
        "photoId": {
          "type": "number",
          "description": "Peer`s photo id"
        },
        "createDate": {
          "type": "number",
          "description": "Date in seconds"
        },
        "firstUserMessagesId": {
          "type": "number",
          "description": "First message`s id for user`s messages in this peer (user`s message`s id)",
          "minimum": 0
        },
        "lastUserMessageId": {
          "type": "number",
          "description": "Last message`s id for user`s messages in this peer (user`s message`s id)"
        },
        "lastChatMessageId": {
          "type": "number",
          "description": "Last message`s id for peer`s message in this peer (peer`s message`s id)"
        },
        "haveAdmin": {
          "type": "boolean",
          "description": "It is true if you are admin"
        },
        "membersIds": {
          "type": "array",
          "description": "Users` id who can send and read messages",
          "items": {
            "type": "number",
            "minimum": 1
          }
        },
        "bannedIds": {
          "type": "array",
          "description": "Users` id who banned (Only for admins)",
          "items": {
            "type": "number",
            "minimum": 1
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "description": "Object of message",
      "properties": {
        "text": {
          "type": "string",
          "description": "Message`s text"
        },
        "date": {
          "type": "number",
          "description": "Sending date in seconds"
        },
        "owner": {
          "type": "number",
          "description": "Owner of this message"
        },
        "type": {
          "type": "number",
          "description": "Type of this message\n0 - Message from user\n1 - Message about creating chat\n2 - Message about invite to chat\n3 - Message about leavin chat\n4 - Message about return to chat\n5 - Catch message\n6 - Uncatch message",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ]
        },
        "peerId": {
          "type": "number",
          "minimum": 1,
          "description": "Peer`s id when message was send"
        },
        "chatMessageId": {
          "type": "number",
          "minimum": 1,
          "description": "Chat`s message`s id"
        },
        "readInChat": {
          "type": "boolean",
          "description": "True if message read in chat"
        },
        "replyMessage": {
          "type": "array",
          "description": "Reples messages",
          "items": {
            "$ref": "#/definitions/Message"
          }
        },
        "photosIds": {
          "type": "array",
          "description": "Message`s photos` ids",
          "items": {
            "type": "number",
            "minimum": 1
          }
        },
        "userMessageId": {
          "type": "number",
          "minimum": 1,
          "description": "User`s message`s id"
        },
        "incoming": {
          "type": "boolean",
          "description": "True if this messages is incoming"
        },
        "read": {
          "type": "boolean",
          "description": "True if you did read this message (Only for incoming messages)"
        }
      }
    }
  },
  "paths": {
    "/server/getPublicKey": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Get server`s public RSA key",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "description": "Server`s public RSA key",
                      "type": "string",
                      "default": "key"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/account{id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get information about user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "description": "User`s id. If id < 1 return youself"
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/account/edit": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Edit information about youself",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "description": "User`s first name"
                },
                "lastName": {
                  "type": "string",
                  "description": "User`s middle name"
                },
                "secondName": {
                  "type": "string",
                  "description": "User`s second name"
                },
                "sex": {
                  "type": "string",
                  "description": "User`s sex",
                  "enum": [
                    "man",
                    "woman"
                  ]
                },
                "bdate": {
                  "type": "string",
                  "description": "User`s bdate. Format: dd.mm.yyyy"
                },
                "closed": {
                  "type": "boolean",
                  "description": "True if you want make closed account"
                },
                "status": {
                  "type": "string",
                  "description": "User`s status"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, account did edit"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/account/getRelations": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get relations about you and other user",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "integer",
            "minimum": 1,
            "description": "User`s id",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string",
                      "description": "Status",
                      "enum": [
                        "friends",
                        "sendRequest",
                        "getRequest",
                        "null",
                        "none",
                        "in_black",
                        "black",
                        "all_black"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/account/login": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Login user and get token with all permissions",
        "parameters": [
          {
            "in": "body",
            "name": "",
            "schema": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string",
                  "description": "User`s login"
                },
                "password": {
                  "type": "string",
                  "description": "User`s password encoded with servers public RSA key"
                },
                "remember": {
                  "type": "boolean",
                  "description": "If true, return unlimit token"
                }
              },
              "required": [
                "login",
                "password"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "description": "User`s token",
                      "type": "string",
                      "default": "token"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/blacklist": {
      "get": {
        "tags": [
          "blacklist"
        ],
        "summary": "Get ids who is in your blacklist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "description": "Ids of users who did add to your blacklist",
                      "minItems": 0,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/blacklist/add": {
      "post": {
        "tags": [
          "blacklist"
        ],
        "summary": "Add user to your blacklist",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "User`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "token",
                "id"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, user added to your blacklist"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/blacklist/delete": {
      "post": {
        "tags": [
          "blacklist"
        ],
        "summary": "Delete user from your blacklist",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "User`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "token",
                "id"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, user deleted from your blacklist"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/friends{id}": {
      "get": {
        "tags": [
          "friends"
        ],
        "summary": "Get ids who is your friends",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "description": "User`s id",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "description": "Ids of users who did add to your friends",
                      "minItems": 0,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/friends/add": {
      "post": {
        "tags": [
          "friends"
        ],
        "summary": "Send friends request or add user to friends",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "User`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "id",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, you send friends request or add user to friends"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/friends/delete": {
      "post": {
        "tags": [
          "friends"
        ],
        "summary": "Delete friend request or delete user from friends",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "User`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "id",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/friends/getSendRequest": {
      "get": {
        "tags": [
          "friends"
        ],
        "summary": "Get ids of users who get your friend`s request",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "description": "Ids of users who did add to your friends",
                      "minItems": 0,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/friends/getGetRequest": {
      "get": {
        "tags": [
          "friends"
        ],
        "summary": "Get ids of users who get your friend`s request",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "description": "Ids of users who did add to your friends",
                      "minItems": 0,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/photos/add": {
      "post": {
        "tags": [
          "photos"
        ],
        "summary": "Upload photo to server",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          },
          {
            "name": "access",
            "in": "query",
            "type": "number",
            "required": true,
            "enum": [
              0,
              1,
              2,
              3
            ],
            "description": "Access for:\n0 - Only user who upload image\n1 - Only friends of user who upload image\n2 - Only friends of friends of user who upload image\n3 - All"
          },
          {
            "name": "photo",
            "in": "formData",
            "type": "file",
            "description": "File for download"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "number",
                      "description": "Photo`s id"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/photo/get": {
      "get": {
        "tags": [
          "photos"
        ],
        "summary": "Download photo from server",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          },
          {
            "name": "id",
            "in": "query",
            "type": "number",
            "description": "Photo`s id",
            "required": true
          },
          {
            "name": "type",
            "in": "query",
            "type": "string",
            "description": "Type of photo:\ns - Max size of side: 75px\nm - Max size of side: 130px\nx - Max size of side: 604px\no - if width/height <= 1.5 return image with max width 130px else return crop image with aspect = 1.5 and max width = 130px\np - if width/height <= 1.5 return image with max width 200px else return crop image with aspect = 1.5 and max width = 200px\nq - if width/height <= 1.5 return image with max width 320px else return crop image with aspect = 1.5 and max width = 320px\nr - if width/height <= 1.5 return image with max width 510px else return crop image with aspect = 1.5 and max width = 510px\ny - Max size of side: 807px\nz - Max size: 1080x1024\nw - Max size: 2560x2048",
            "enum": [
              "s",
              "m",
              "x",
              "o",
              "p",
              "q",
              "r",
              "y",
              "z",
              "w"
            ]
          }
        ],
        "produces": [
          "image/png",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return image from server or error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/photo/setTarget": {
      "post": {
        "tags": [
          "photos"
        ],
        "summary": "Set photo`s target",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "Photo`s id"
                },
                "target": {
                  "type": "number",
                  "description": "WARNING: photo will set access for all users.\nPhoto targets:\n1 - User`s avatar"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "id",
                "target",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/photo/getTarget": {
      "get": {
        "tags": [
          "photos"
        ],
        "summary": "Get photo`s target",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "number",
            "description": "User`s id. If id = -1 return youself target",
            "required": true
          },
          {
            "name": "target",
            "in": "query",
            "type": "number",
            "description": "WARNING: photo will set access for all users.\nPhoto targets:\n1 - User`s avatar",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "number",
                      "minimum": 1,
                      "description": "Photo`s id"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/addToChat": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Return to the chat, if you leaved",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Peer`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "id",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/addUserToChat": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Add user to this chat if you are admin",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "User`s who will be in chat"
                },
                "peer_id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Peer`s id"
                },
                "admin": {
                  "type": "boolean",
                  "description": "If true user will be admin"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "user_id",
                "peer_id",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/createChat": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Create chat for users",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Chat`s name"
                },
                "users_ids": {
                  "type": "array",
                  "description": "Ids of users",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "name",
                "users_ids",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "number",
                      "description": "Peer`s id"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/deleteUserFromChat": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Delete user from chat",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "User`s id"
                },
                "peer_id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Peer`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "user_id",
                "peer_id",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/getAllChat": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Get all chats of users",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Start of list",
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "minimum": 1,
            "default": 20,
            "description": "Length of list",
            "required": false
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "peer_id": {
                            "type": "number",
                            "minimum": 1,
                            "description": "Peer`s id"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/getById": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Get message from user`s message`s id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "number",
            "minimum": 0,
            "description": "Message`s id",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/Message"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/getByPeerMessageId": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Get message from peer`s message`s id",
        "parameters": [
          {
            "name": "peer_id",
            "in": "query",
            "type": "number",
            "minimum": 1,
            "description": "Peer`s id",
            "required": true
          },
          {
            "name": "id",
            "in": "query",
            "type": "number",
            "minimum": 1,
            "description": "Peer`s message`s id",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/Message"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/getPeerById": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Get peer from id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "number",
            "minimum": 1,
            "description": "Peer`s id",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "User`s token",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/Peer"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/leaveFromChat": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Leave peer",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Peer`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "id",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/markAsRead": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Mark message to read",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "User`s message`s id"
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "id",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/messages/sendMessage": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Send message to peer",
        "parameters": [
          {
            "name": "",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "peer_id": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Peer`s id"
                },
                "text": {
                  "type": "string",
                  "description": "Message`s text"
                },
                "reples": {
                  "type": "array",
                  "description": "Reples messages",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                },
                "photos": {
                  "type": "array",
                  "description": "Message`s photos` ids",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                },
                "token": {
                  "type": "string",
                  "description": "User`s token"
                }
              },
              "required": [
                "peer_id",
                "text",
                "token"
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return data from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "boolean",
                      "description": "If true, action success"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  }
}